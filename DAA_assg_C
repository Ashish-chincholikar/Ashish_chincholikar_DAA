1C
=========================
#include <iostream>
using namespace std;

int findSmallestNumberWithTrailingZeros(int n) {
    int result = 0;
    int power = 5; // Initialize with the power of 5

    while (n / power > 0) {
        result += n / power;
        power *= 5;
    }

    return result * 5; // Multiply by 5 to get the smallest number
}

int main() {
    int n;
    cout << "Enter the value of n: ";
    cin >> n;

    int smallestNumber = findSmallestNumberWithTrailingZeros(n);

    cout << "Smallest number with at least " << n << " trailing zeroes: " << smallestNumber << endl;

    return 0;
}
=========================
2C
problem statment:
Implement Subset Sum Problem.
Statement Given a set of non-negative integers and a 
value sum, the task is to check if there is a subset of the 
given set whose sum is equal to the given sum.
Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9 
Output: True
Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 30 
Output: False


#include<iostream>
using namespace std;

int Set[]={7,34,4,10,6,1};

bool sos(int s, int sum)
{
    cout<<"Sum:"<<sum<<endl;

    if(sum==0)
        return true;

    else if(s==0)
        return false;

    else if(sum-Set[s-1]<0)
        return sos(s-1,sum);

    else
        {
            return sos(s-1,sum-Set[s-1]) || sos(s-1,sum);
        }
}

int main()
{
    int sum=15, s ;
    s=sizeof(Set)/4;
    if(sos(s,sum)==1)
        cout<<"True";
    else
        cout<<"False";

    return 0;
}
